{"ast":null,"code":"var _jsxFileName = \"/home/crhea/Documents/SFL/Training/Websocket-Chat/frontend/client/src/components/Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Button, Form, FormGroup, Input, Label } from \"reactstrap\";\nimport socketIOClient from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ENDPOINT = \"http://127.0.0.1:3000\"; //function sendMessage(){\n//axios.get(\"/api/chats\").then(res => this.setState({chatList: res.data})).catch(e => console.log(e))\n//}\n\nfunction Chat() {\n  _s();\n\n  const [messages, setMessages] = useState('message 2');\n  const messageInput = document.getElementById('message-input');\n  const roomInput = document.getElementById('room-input');\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"receive-message\", data => {\n      setMessages(data);\n    });\n  }, []);\n\n  const sendMessage = e => {\n    // Define what to do when we send a message\n    e.preventDefault(); // prevent submission\n\n    const socket = socketIOClient(ENDPOINT);\n    const message = messageInput.value; // get message input\n\n    console.log(message);\n    const room = roomInput.value; // Get room name\n\n    socket.emit('send-message', message, room); // print out message\n\n    if (message === \"\") {\n      console.log('No message entered.');\n    } else {\n      messageInput.value = ''; // Clear message value\n\n      setMessages([...message]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"col-lg-6 w-50 h-50 align-items-center mx-auto\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"message-container\",\n      className: \"col-lg-12 border border-info rounded w-100 h-50\",\n      children: messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      children: [/*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"message-input\",\n          children: \"Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          name: \"message\",\n          id: \"message-input\",\n          placeholder: \"Enter Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        onClick: sendMessage,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(FormGroup, {\n        children: [/*#__PURE__*/_jsxDEV(Label, {\n          for: \"room-input\",\n          children: \"Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(Input, {\n          type: \"text\",\n          id: \"room\",\n          name: \"room-input\",\n          placeholder: \"room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 27\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        color: \"success\",\n        children: \"Join\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Chat, \"IEwNnE1zUonggdc3lCjtf7naov4=\");\n\n_c = Chat;\nexport default Chat;\n/*export default class Chat extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chatList: [],\n            messages: ['message 1'],\n        } // end state\n    }  // end constructor\n\n    async componentDidMount() {  // To run on mount\n    this.refreshList();\n  };\n\n  // Function to update chatList by querying the todos API\n  refreshList = () => {\n    //axios.get(\"/api/chats\").then(res => this.setState({chatList: res.data})).catch(e => console.log(e))\n  };\n\n  renderMessages = () => {\n      return this.state.messages.map(message => (\n          <li key={message.id} className=\"list-group-item d-flex justify-content-between align-items-center\">{message}</li>\n      ));\n  }\n\n  receiveMessage = () => {\n      const socket = socketIOClient(ENDPOINT);\n        socket.on(\"receive-message\", data => {\n\n    });\n  }\n\n  render() {\n        return(\n            <div className='col-lg-6 w-50 h-50 align-items-center mx-auto'>\n            <div id=\"message-container\" className='col-lg-12 border border-info rounded w-100 h-50'>{this.renderMessages()}</div>\n                <Form>\n                      <FormGroup>\n                          <Label for='message'>Message</Label>\n                          <Input\n                            type='text' name='message' id=\"message\"\n                            placeholder=\"Enter Message\"\n                          />\n                      </FormGroup>\n                    <Button color='success'>\n                        Send\n                  </Button>\n                      <FormGroup>\n                          <Label for='room'>Room</Label>\n                          <Input\n                            type='text' id=\"room\" name='room'\n                             placeholder=\"room\"\n                          />\n                      </FormGroup>\n                    <Button color='success'>\n                        Join\n                  </Button>\n                </Form>\n            </div>\n        )\n  };\n\n}  // end Chat Component\n*/\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["/home/crhea/Documents/SFL/Training/Websocket-Chat/frontend/client/src/components/Chat.js"],"names":["React","useState","useEffect","axios","Button","Form","FormGroup","Input","Label","socketIOClient","ENDPOINT","Chat","messages","setMessages","messageInput","document","getElementById","roomInput","socket","on","data","sendMessage","e","preventDefault","message","value","console","log","room","emit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport {\n    Button,\n    Form,\n    FormGroup,\n    Input,\n    Label\n} from \"reactstrap\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://127.0.0.1:3000\";\n\n\n//function sendMessage(){\n    //axios.get(\"/api/chats\").then(res => this.setState({chatList: res.data})).catch(e => console.log(e))\n//}\n\nfunction Chat(){\n    const [messages, setMessages] = useState('message 2');\n    const messageInput = document.getElementById('message-input');\n    const roomInput = document.getElementById('room-input');\n\n    useEffect(() => {\n        const socket = socketIOClient(ENDPOINT);\n        socket.on(\"receive-message\", data => {\n          setMessages(data);\n        });\n      }, []);\n\n    const sendMessage = (e) => {  // Define what to do when we send a message\n        e.preventDefault();  // prevent submission\n        const socket = socketIOClient(ENDPOINT);\n        const message = messageInput.value;  // get message input\n        console.log(message)\n        const room = roomInput.value;  // Get room name\n        socket.emit('send-message', message, room)\n        // print out message\n        if (message === \"\") {\n            console.log('No message entered.')\n        }else{\n            messageInput.value = '';   // Clear message value\n            setMessages([...message])\n        }\n    }\n\n    return(\n            <div className='col-lg-6 w-50 h-50 align-items-center mx-auto'>\n            <div id=\"message-container\" className='col-lg-12 border border-info rounded w-100 h-50'>{messages}</div>\n                <Form>\n                      <FormGroup>\n                          <Label for='message-input'>Message</Label>\n                          <Input\n                            type='text' name='message' id=\"message-input\"\n                            placeholder=\"Enter Message\"\n                          />\n                      </FormGroup>\n                    <Button color='success' onClick={sendMessage}>\n                        Send\n                  </Button>\n                      <FormGroup>\n                          <Label for='room-input'>Room</Label>\n                          <Input\n                            type='text' id=\"room\" name='room-input'\n                             placeholder=\"room\"\n                          />\n                      </FormGroup>\n                    <Button color='success'>\n                        Join\n                  </Button>\n                </Form>\n            </div>\n        )\n}\nexport default Chat\n/*export default class Chat extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            chatList: [],\n            messages: ['message 1'],\n        } // end state\n    }  // end constructor\n\n    async componentDidMount() {  // To run on mount\n    this.refreshList();\n  };\n\n  // Function to update chatList by querying the todos API\n  refreshList = () => {\n    //axios.get(\"/api/chats\").then(res => this.setState({chatList: res.data})).catch(e => console.log(e))\n  };\n\n  renderMessages = () => {\n      return this.state.messages.map(message => (\n          <li key={message.id} className=\"list-group-item d-flex justify-content-between align-items-center\">{message}</li>\n      ));\n  }\n\n  receiveMessage = () => {\n      const socket = socketIOClient(ENDPOINT);\n        socket.on(\"receive-message\", data => {\n\n    });\n  }\n\n  render() {\n        return(\n            <div className='col-lg-6 w-50 h-50 align-items-center mx-auto'>\n            <div id=\"message-container\" className='col-lg-12 border border-info rounded w-100 h-50'>{this.renderMessages()}</div>\n                <Form>\n                      <FormGroup>\n                          <Label for='message'>Message</Label>\n                          <Input\n                            type='text' name='message' id=\"message\"\n                            placeholder=\"Enter Message\"\n                          />\n                      </FormGroup>\n                    <Button color='success'>\n                        Send\n                  </Button>\n                      <FormGroup>\n                          <Label for='room'>Room</Label>\n                          <Input\n                            type='text' id=\"room\" name='room'\n                             placeholder=\"room\"\n                          />\n                      </FormGroup>\n                    <Button color='success'>\n                        Join\n                  </Button>\n                </Form>\n            </div>\n        )\n  };\n\n}  // end Chat Component\n*/"]},"metadata":{},"sourceType":"module"}